#!/usr/bin/env python

import sys
import argparse
import random

parser = argparse.ArgumentParser()
parser.add_argument('map', metavar='MAPFILE', type=str, help='mapfile to read')
parser.add_argument('--delete', help='delete non-mappable tokens', action='store_true')
parser.add_argument('--unk', help='replace token for non-mappable tokens', type=str, default=None)
parser.add_argument('--invert', help='invert mapping', action='store_true')
parser.add_argument('--identity', help='setup identitiy mapping - useful together with --delete', action='store_true')
parser.add_argument('--nondeterministic', help='allow nondeterministic mappings', action='store_true')

args = parser.parse_args()

if args.unk != None and args.delete == True:
    print >> sys.stderr, "cannot use delete and define unk token"
    print >> sys.stderr, "exiting."
    sys.exit(1)
#    print >> sys.stderr, "reads from stdin and maps tokens"

f = open(args.map, 'r')

token_map = {}
line_no = 0

target_field = 1
source_field = 0

if args.invert:
    target_field, source_field = source_field, target_field

if args.identity:
    target_field = source_field

for line in f:
    line = line.strip()
    tokens = line.split()
    if len(tokens) > 1:
        token_map.setdefault(tokens[source_field], [])
        token_map[tokens[source_field]] += [tokens[target_field]]
    else:
        token_map.setdefault(line, [])
        if args.identity:
            token_map[line] += [ line ]
        else:
            token_map[line] += [ str(line_no) ]
    line_no+=1

# check if this is a nondeterministic mapping
if not args.nondeterministic:
    for x in token_map:
        if len(token_map[x]) > 1:
            print >> sys.stderr, "WARNING: non-deterministic mapping!"
            sys.exit(1)

for line in sys.stdin:
    tokens = line.split()
    tokens_out = []
    for t in tokens:
        if t in token_map:
            tokens_out += [ random.choice(token_map[t]) ]
        elif not args.delete:
            if args.unk == None:
                tokens_out += [ t ]
            else:
                tokens_out += [ args.unk ]
    print " ".join(tokens_out)
